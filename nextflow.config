params {
    // generic
    help = false

    // shared (not output)
    genomefa = "$baseDir/genome.fa"
    badloci = "$baseDir/badloci.bed.gz"
    exclude = 'NO_EXCLUDE'

    // output locations
    outdir = "$PWD/results"
    reportDir = "${params.outdir}/reports"

    // pindel_pl specific
    tumour  = null
    normal  = null
    simrep  = null
    filter  = null
    genes  = null
    unmatched  = null
    seqtype  = 'WGS'
    assembly  = 'NO_ASSEMBLY'
    species  = 'NO_SPECIES'
    skipgerm  = null
    softfil  = 'NO_FILE'
    apid  = 'NO_PROCESS'

    // np_generation specific
    bams = null
    range = false
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
trace {
  enabled = true
  file = "${params.reportDir}/execution_trace_${trace_timestamp}.txt"
}
// To allow DAG, Graphviz must be installed
/*
dag {
    enabled = true
    file    = "${params.reportDir}/pipeline_dag_${trace_timestamp}.svg"
}
*/
timeline {
  enabled = true
  file = "${params.reportDir}/execution_timeline_${trace_timestamp}.html"
}
report {
  enabled = true
  file = "${params.reportDir}/execution_report_${trace_timestamp}.html"
}

process {
    // np_generation
    withName: 'create_fake_bam' {
        cpus = 1
        memory = '1 GB'
        queue = 'yesterday'
    }
    withName: 'np_pindel' {
        cpus = 3
        memory = '6 GB'
        queue = 'yesterday'
    }
    withName: 'np_creation' {
        cpus = 1
        memory = '4 GB'
        queue = 'yesterday'
    }
    // pindel_pl
    withName: 'pindel' {
        cpus = 2
        memory = '8 GB'
        queue = 'yesterday'
    }
    withName: 'pindel_flag' {
        cpus = 1
        memory = '4 GB'
        queue = 'yesterday'
    }
}

// this will only work if there is a docker/singularity image available
profiles {
    local {
        process.executor = 'local'
    }
    lsf {
        process.executor = 'lsf'
        executor.perJobMemLimit = true
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        singularity.runOptions = '--cleanenv'
        docker.enabled         = false

    }
}
